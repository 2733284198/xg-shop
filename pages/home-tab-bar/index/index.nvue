<template>
	<view class="index-page">
		<scroll-view ref="page-scroll" class="pageScroll" scroll-with-animation :show-scrollbar="false" lower-threshold="10" :scrollTop="pageScrollTop" :scroll-y="pageScrollable" @scrolltolower="pageScrollToLower" @scroll="pageScroll">
			<view>
				<view class="nav-bar-placeholder" :style="{height: xgNavBarMaxHeight + 'px'}"></view>
				
				
				
				<!-- 顶部导航栏及背景 -->
				<image class="xg-nav-bar-bg-img" :src="xgNavBar.backgroundImage"></image>
				
				<!-- 导航栏下的轮播图 -->
				<uni-swiper-dot :info="carouselList" :current="carouselIndex" mode="default" :dotsStyles="{backgroundColor: '#999', selectedBackgroundColor: '#FFF', width: 8}">
					<swiper class="carousel" circular autoplay :interval="5000" :duration="500" @change="carouselChange">
						<swiper-item v-for="(carousel, index) of carouselList" :key="index">
							<view class="carousel-image-wrap">
								<image class="carousel-image" :src="carousel.image" @tap="carouselTap(carousel.url)"></image>
							</view>
						</swiper-item>
					</swiper>
				</uni-swiper-dot>
				
				<!-- 轮播图下的分类导航 -->
				<uni-swiper-dot :info="cateNavPagesData" :current="cateNavIndex" mode="default">
					<swiper  class="cate-nav" @change="cateNavIndexChange">
						<swiper-item v-for="(cateNavData, cateNavIndex) of cateNavPagesData" :key="cateNavIndex">
							<uni-grid :showBorder="false" :square="true" :column="cateNav.column">
								<uni-grid-item v-for="(cate, index) of cateNavData" :key="index">
									<xg-icon :index="cate.id" :iconStyle="cateNav.iconStyle" :thumb="cate.thumb" :thumbStyle="cateNav.thumbStyle" :subtitle="cate.subtitle" :subtitleStyle="cateNav.subtitleStyle"></xg-icon>
								</uni-grid-item>
							</uni-grid>
						</swiper-item>
					</swiper>
				</uni-swiper-dot>
				
				
				<!-- 产品列表tab -->
				<view class="product-list-tab-section" :style="{height: productListTabSectionHeight + 'px'}">
					<xg-tab-bar class="product-list-tab-bar">
						<xg-tab-bar-item v-for="(icon, index) of productListTabBar.iconList" :key="index">
							<xg-icon :selected="productListTabCurrentIndex === index"  :title="icon.title" :titleStyle="productListTabBar.titleStyle" :selectedTitleStyle="productListTabBar.selectedTitleStyle" :subtitle="icon.subtitle" :selectedSubtitleStyle="productListTabBar.selectedSubtitleStyle" @iconTap="productListTabBarIconTap(index)"></xg-icon>
						</xg-tab-bar-item>
					</xg-tab-bar>
					<swiper class="product-list-tab" :current="productListTabCurrentIndex" @change="productListTabChange">
						<swiper-item v-for="(productListTabCard, productListTabDataIndex) of productListTabData" :key="productListTabDataIndex">
							<scroll-view class="product-list-tab-scroll" upper-threshold="10" :scroll-y="productListTabScrollable" :show-scrollbar="false" scroll-with-animation :scroll-top="productListTabScrollTop[productListTabDataIndex]" @scrolltoupper="productListTabScrolltoupper" @scrolltolower="productListTabScrolltolower" @scroll="productListTabScroll(productListTabDataIndex, $event)">
								<tpl-product-list :columnCount="productListTab.columnCount" :columnGap="productListTab.columnGap" :rowGap="productListTab.rowGap" :leftGap="productListTab.leftGap" :rightGap="productListTab.rightGap" :productList="productListTabCard"></tpl-product-list>
								
								<uni-load-more :status="loadMoreStatus"></uni-load-more>
							</scroll-view>
						</swiper-item>
					</swiper>
					
				</view>
			</view>
		</scroll-view>
		
		<!-- 返回顶部按钮 -->
		<image v-if="goTopButtonShow" class="go-top-button" :src="goTopButton.image" :style="{width: goTopButton.size, height: goTopButton.size, bottom: goTopButton.bottom, right: goTopButton.right}" @tap="goTop"></image>
		
		<view class="nav-bar">
			<xg-nav-bar status-bar hasChangeable :fixedHeight="xgNavBar.fixedHeight" :progress="xgNavBarProgress" :left="xgNavBar.left" :right="xgNavBar.right" :searchInput="xgNavBar.searchInput" @getNavBarMinHeight="getNavBarMinHeight" @getNavBarMaxHeight="getNavBarMaxHeight" @iconTap="xgNavBarIconTap" @searchInputRightIconTap="xgNavBarSearchInputRightIconTap" @focus="xgNavBarSearchInputFocus">
				<image class="xg-nav-bar-bg-img" :src="xgNavBar.backgroundImage"></image>
			</xg-nav-bar>
		</view>
	</view>
</template>

<script>
	import {between, getComponentRect} from '@/common/helper.js';
	import config from '@/config/home-tab-bar/index/index.js';
	import data from '@/data/home-tab-bar/index/index.js';
	
	const customData = {
		inertiaCoefficient: 7, //惯性系数，决定靠惯性滚动的距离，值越大滚动越远
		pageScrollDeltaY: 0, //页面滚动速度
		productListTabScrollDeltaY: 0, //产品列表滚动速度
		
		productListTabImageLoaded: {},
	};
	
	export default {
		mixins: [config],
		inject: ['homeTabBar'],
		data() {
			return {
				old:{
					pageScrollTop: 0,
					productListTabScrollTop: [],
				},
				
				//页面级
				pageScrollHeight: 0,
				pageScrollable: true,
				pageScrollTop: 0,
				goTopButtonShow: false, //是否显示返回顶部按钮
				
				//顶部导航栏
				xgNavBarProgress: 0,
				xgNavBarMinHeight: 0,
				xgNavBarMaxHeight: 0,
				
				//轮播图
				carouselIndex: 0,
				carouselList: [],
				
				//分类导航
				cateNavIndex:0,
				
				//产品列表
				productListTabCurrentIndex: 0,
				productListTabData: [],
				productListTabScrollable: false,
				productListTabScrollTop: [],
				productListTabImageWidth: 0,
				loadMoreStatus: 'more'  //more,loading,nomore
			}
		},
		async created() {
			this.carouselList = await data.carouselList();
			this.productListTabData = (new Array(this.productListTabBar.iconList.length)).fill([]);
			this.old.productListTabScrollTop = (new Array(this.productListTabBar.iconList.length)).fill(0);
			this.productListTabScrollTop = (new Array(this.productListTabBar.iconList.length)).fill(0);
			
			this.$set(this.productListTabData, 0, await data.productListTab(0))
		},
		mounted() {
			this.$nextTick(async function () {
				// #ifndef APP-PLUS-NVUE
				const selector = uni.createSelectorQuery().in(this);
				selector.select('.pageScroll').fields({size: true});
				selector.exec(data => {
					this.pageScrollHeight = data[0].height;
				})
				// #endif
				// #ifdef APP-PLUS-NVUE
				const pageScrollData = await getComponentRect(this.$refs['page-scroll']);
				this.pageScrollHeight = pageScrollData.size.height;
				// #endif
			})
		},
		computed: {
			cateNavPagesData() {
				const pageCount = Math.ceil(this.cateNav.cateList.length/(this.cateNav.column*this.cateNav.row))
				
				const cateNavPagesData = [];
				
				for (let i = 0; i < pageCount; ++i) {
					cateNavPagesData[i] = this.cateNav.cateList.slice(this.cateNav.column * this.cateNav.row * i, this.cateNav.column * this.cateNav.row * (i + 1))
				}
				
				return cateNavPagesData;
			},
			
			productListTabSectionHeight() {
				return this.homeTabBar.pageContentHeight - this.xgNavBarMinHeight;
			}
		},
		methods: {
			toPx(value) {
				const result = /(\d+)(\w+)/.exec(value);
				if ('rpx' === result[2].trim()) {
					return uni.getSystemInfoSync().screenWidth * Number(result[1]) / 750;
				} else if('px' === result[2].trim()) {
					return Number(result[1]);
				} else {
					throw new TypeError(`${value}单位格式不正确`);
				}
				
			},
			
			//页面部分
			goTop() {
				this.productListTabGoTop();
				
				this.pageScrollTop = this.old.pageScrollTop;
				
				this.$nextTick(function () {
					
					setTimeout(() => {
						this.productListTabScrollable = false;
						this.pageScrollable = true;
						this.pageScrollTop = 0;
					}, 10);
					
				})
			},
			pageScroll(e) {
				customData.pageScrollDeltaY = e.detail.deltaY;
				this.old.pageScrollTop = e.detail.scrollTop;
				
				this.xgNavBarProgress = between(e.detail.scrollTop/100, 0, 1);
				
				this.goTopButtonShow = (e.detail.scrollTop > 200);
			},
			pageScrollToLower(e) {
				//TODO
				this.productListTabScrollable = true;
				// #ifdef APP-PLUS-NVUE
				this.pageScrollable = false;
				// #endif
				
				
				//TODO
				// #ifdef APP-PLUS-NVUE
				this.productListTabScrollTop[this.productListTabCurrentIndex] = -customData.pageScrollDeltaY*customData.inertiaCoefficient;
				// #endif
			},
			
			//顶部自定义导航栏
			getNavBarMinHeight(e) {
				this.xgNavBarMinHeight = e;
			},
			getNavBarMaxHeight(e) {
				this.xgNavBarMaxHeight = e;
			},
			xgNavBarIconTap(e) {
				console.log('点击了导航栏图标：', e);
			},
			xgNavBarSearchInputRightIconTap(e) {
				console.log('点击导航栏右侧按钮');
			},
			xgNavBarSearchInputFocus(e) {
				// console.log('导航栏搜索框聚焦');
				uni.navigateTo({url: '/pages/search/search'});
			},
			
			//轮播图区域
			carouselTap(url) {
				uni.navigateTo({url: url});
			},
			carouselChange(e) {
				this.carouselIndex = e.detail.current;
			},
			
			//菜单导航栏
			cateNavIndexChange(e) {
				this.cateNavIndex = e.detail.current;
			},
			
			//嵌套滚动的产品列表
			async initProductListTab() {
				if (!this.productListTabData[this.productListTabCurrentIndex].length) {
					this.$set(this.productListTabData, this.productListTabCurrentIndex, await data.productListTab(this.productListTabCurrentIndex));
				}
			},
			productListTabBarIconTap(index) {
				this.productListTabCurrentIndex = index;
				this.initProductListTab();
			},
			productListTabChange(e) {
				const currentIndex = e.detail.current;
				this.productListTabCurrentIndex = currentIndex;
				this.initProductListTab();
				this.loadMoreStatus = 'more';
			},
			async productListTabScrolltolower(e) {
				this.loadMoreStatus = 'loading';
				let productList = await data.productListTab(this.productListTabCurrentIndex);
				this.productListTabData[this.productListTabCurrentIndex].push(...productList);
				// this.loadMoreStatus = 'more';
				
				// this.$set(this.productListTabData, this.productListTabCurrentIndex,  await data.productListTab(index))
			},
			productListTabScrolltoupper(e) {
				this.pageScrollable = true;
				this.productListTabScrollable = false;
				
				// #ifdef APP-PLUS-NVUE
				this.pageScrollTop = (this.pageScrollTop === 0 ? 0 : this.old.pageScrollTop - customData.productListTabScrollDeltaY*customData.inertiaCoefficient);
				// #endif
			},
			productListTabScroll(index, e) {
				customData.productListTabScrollDeltaY = e.detail.deltaY;
				this.old.productListTabScrollTop[index] = e.detail.scrollTop;
			},
			productListTabGoTop() {
				this.productListTabScrollTop = [...this.old.productListTabScrollTop];
				
				this.$nextTick(function () {
					this.productListTabScrollTop = [...this.old.productListTabScrollTop.fill(0)];
				})
			},
			getWaterfallItemWidth(e) {
				this.productListTabImageWidth = e;
			},
			productListTabImageLoad(ref) {
				// console.log(this.$refs[ref]);
				if (!customData.productListTabImageLoaded[ref]) {
					customData.productListTabImageLoaded[ref] = true;
					
					setTimeout(() => {
						this.$refs[ref][0].calculateLayout();
					}, 10)
				}
			}
		},
		
	}
</script>

<style lang="scss" scoped>
	$uni-spacing-row-base: 24rpx !default;
	$uni-spacing-col-base: 20rpx !default;
	$uni-border-radius-lg: 24rpx !default;
	
	.index-page {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
	}
	.nav-bar {
		/* #ifndef APP-PLUS-NVUE */
		z-index: 10000;
		/* #endif */
		
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
	}
	
	.pageScroll {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
	}
	
	.go-top-button {
		/* #ifndef APP-PLUS-NVUE */
		z-index: 10000;
		/* #endif */
		position: absolute;
	}
	
	.xg-nav-bar-bg-img {
		position: absolute;
		top: 0;
		width: 750rpx;
		height: 400rpx;
	}
	
	.carousel {
		width: 750rpx;
		height: 350rpx;
	}
	.carousel-image-wrap {
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		justify-content: center;
		// padding-bottom: 100rpx;
	}
	.carousel-image {
		border-radius: $uni-border-radius-lg;
		width: 750rpx - $uni-spacing-col-base * 2;
		height: 350rpx;
	}
	
	.cate-nav {
		// border-width: 1px;
		margin-top: $uni-spacing-row-base;
		height: 300rpx;
	}
	
	
	.product-list-tab-section {
		// border-width: 1px;
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		flex-direction: column;
	}
	.product-list-tab-bar {
		// margin-top: $uni-spacing-row-sm;
		margin-bottom: $uni-spacing-row-sm;
		padding-left: $uni-spacing-col-base;
		padding-right: $uni-spacing-col-base;
	}
	.product-list-tab {
		position: relative;
		flex: 1;
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		flex-direction: column;
	}
	.product-list-tab-scroll {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
	}
	.product-list-tab-scroll-agent {
		z-index: 100000;
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		background-color: rgba(0, 0, 0, 0.3);
	}
</style>